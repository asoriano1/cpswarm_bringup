<?xml version="1.0"?>
<launch>
    <arg name="id" default="1"/>
    <arg name="log_output" default="screen"/>
    <arg name="robot_id" default="robot_1"/>
    <arg name="prefix" default="$(arg robot_id)_"/>
    <arg name="sim" default="$(optenv TURTLEBOT_SIMULATION false)"/>
    <arg name="mapping" default="false"/>

    <group ns="$(arg robot_id)">
        <!-- Turtlebot minimal -->
        <include unless="$(arg sim)" file="$(find turtlebot_bringup)/launch/minimal.launch">
            <arg name="prefix_frame" value="$(arg prefix)"/>
        </include>

        <!-- Elevator action -->
        <!--include file="$(find turtlebot_elevator)/launch/elevator_action.launch"/-->

        <!-- Rplidar laser node -->
        <include unless="$(arg sim)" file="$(find turtlebot_bringup)/launch/includes/2dsensor/rplidar.launch">
            <arg name="range_min" value="0.22" />
            <arg name="range_max" value="18.0" />
            <arg name="frame_id" value="$(arg prefix)laser_link"/>
        </include>

        <!-- Map Server, AMCL and Move Base  -->
        <include unless="$(arg mapping)" file="$(find cpswarm_bringup)/launch/amcl_movebase.launch">
            <arg name="robot_id" value="$(arg robot_id)"/>
        </include>

        <!-- Leds management -->
        <include unless="$(arg sim)" file="$(find cpswarm_bringup)/launch/robotnik_leds.launch"/>

        <!-- Pad teleoperation -->
        <include file="$(find turtlebot_teleop)/launch/ps4_teleop.launch"/>

        <!-- Robotnik local services (better if it is launched independently)-->
        <!--include file="$(find robotnik_local_services)/launch/demo_one_robot.launch"/-->

	<!--docking station-->
        <include file="$(find kobuki_auto_docking)/launch/minimal.launch"/>

	<!-- Abstraction Library -->
        <include file="$(find cpswarm_turtlebot)/launch/turtlebot_abstraction_library.launch">
            <arg name="id" value="$(arg id)" />
            <arg name="log_output" value="$(arg log_output)" />
        </include>

        <!-- SwarmROS -->
        <node pkg="swarmros" type="bridge" name="swarmio_$(arg id)" args="-C$(find cpswarm_turtlebot)/launch/param/turtlebot_swarmros.cfg" output="$(arg log_output)" />

        <!-- State Machine -->
        <node pkg="cpswarm_turtlebot" type="turtlebot_behavior_test.py" name="machine_state_node_$(arg id)"/>


	<!--tf static to map to share the same frame-->
        <node pkg="tf" type="static_transform_publisher" name="tf_robot_map_to_map" args="0 0 0 0 0 0 /map /$(arg prefix)map 100"/>


    </group>

    <!-- Turtlebot simulation-->
    
<param name="use_sim_time" value="true"/>
    <!--which robots -->
    <arg name="launch_robot_a" default="true"/>
    <arg name="launch_robot_b" default="true"/>
    <arg name="launch_robot_c" default="false"/>

    <!--args for robot a-->
    <arg name="map_file_a" default="digisky_hangar"/>
    <arg name="gmapping_robot_a" default="false"/>
    <arg name="move_base_robot_a" default="true"/>
    <arg name="amcl_and_mapserver_a" default="true"/>
    <arg name="x_init_pose_robot_a" default="-5.0"/>
    <arg name="y_init_pose_robot_a" default="-1.0"/>
    <arg name="a_init_pose_robot_a" default="0.0"/>
    <!--args for robot b-->
    <arg name="map_file_b" default="digisky_hangar"/>
    <arg name="gmapping_robot_b" default="false"/>
    <arg name="move_base_robot_b" default="true"/>
    <arg name="amcl_and_mapserver_b" default="true"/>
    <arg name="x_init_pose_robot_b" default="-5.0"/>
    <arg name="y_init_pose_robot_b" default="0.0"/>
    <arg name="a_init_pose_robot_b" default="0.0"/>
    <!--args for robot c-->
    <arg name="map_file_c" default="digisky_hangar"/>
    <arg name="gmapping_robot_c" default="false"/>
    <arg name="move_base_robot_c" default="true"/>
    <arg name="amcl_and_mapserver_c" default="true"/>
    <arg name="x_init_pose_robot_c" default="-5.0"/>
    <arg name="y_init_pose_robot_c" default="1.0"/>
    <arg name="a_init_pose_robot_c" default="0.0"/>


    <include if="$(arg sim)" file="$(find cpswarm_bringup)/launch/logistics_demo.launch">

        <arg name="launch_robot_a" default="$(arg launch_robot_a)"/>
        <arg name="map_file_a" value="$(arg map_file_a)"/>
        <arg name="gmapping_robot_a" value="$(arg gmapping_robot_a)"/>
        <arg name="move_base_robot_a" value="$(arg move_base_robot_a)"/>
        <arg name="amcl_and_mapserver_a" value="$(arg amcl_and_mapserver_a)"/>

        <arg name="launch_robot_b" default="$(arg launch_robot_b)"/>
        <arg name="gmapping_robot_b" value="$(arg gmapping_robot_b)"/>
        <arg name="move_base_robot_b" value="$(arg move_base_robot_b)"/>
        <arg name="amcl_and_mapserver_b" value="$(arg amcl_and_mapserver_b)"/>
        <arg name="map_file_b" value="$(arg map_file_b)"/>

        <arg name="launch_robot_c" default="$(arg launch_robot_c)"/>
        <arg name="gmapping_robot_c" value="$(arg gmapping_robot_c)"/>
        <arg name="move_base_robot_c" value="$(arg move_base_robot_c)"/>
        <arg name="amcl_and_mapserver_c" value="$(arg amcl_and_mapserver_c)"/>
        <arg name="map_file_c" value="$(arg map_file_c)"/>

        <!-- fake elevator for gazebo-->
        <!--node pkg="robotnik_base_hw_sim" type="elevator_fake_pickup_gazebo.py" name="elevator_fake_pickup_gazebo">
		<rosparam command="load" file="$(arg config_yaml)" />
	</node-->

    </include>

    <!-- mapping node (this is commented because is better if it is launched independently)-->
    <!--include if="$(arg mapping)" file="$(find cpswarm_bringup)/launch/mapping.launch"/-->


</launch>
